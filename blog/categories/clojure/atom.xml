<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Yuri Subach]]></title>
  <link href="http://yurisubach.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://yurisubach.com/"/>
  <updated>2014-03-13T17:16:02+01:00</updated>
  <id>http://yurisubach.com/</id>
  <author>
    <name><![CDATA[Yuri Subach]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Eight queens (N-queens) solution in Clojure]]></title>
    <link href="http://yurisubach.com/blog/2014/01/19/eight-queens-n-queens-solution-in-clojure/"/>
    <updated>2014-01-19T13:15:00+01:00</updated>
    <id>http://yurisubach.com/blog/2014/01/19/eight-queens-n-queens-solution-in-clojure</id>
    <content type="html"><![CDATA[<p>I have been interested in learning functional programming language
during last months. My current choice is <a href="http://clojure.org/">Clojure</a>
language because this is a dialect of Lisp based on JVM. So it seems to
be good candidate for usage in real projects.</p>

<p>Since functional programming requires thinking style
diffent from imperative languages like PHP, Python or Java I decided to
try and implement some pure computational task.</p>

<p>&ldquo;Eight queens&rdquo; task is perfect for testing functional programming
language because solution for this task is recursive. You need to put 8
queens on the chessboard so that no two queens attack each other. This
task can be extended to N-sized chessboard, in this case you need to
place N queens.</p>

<p>My solution in Clojure is written below:</p>

<p>``` clojure
(def board-size 8)</p>

<p>(defn qtest [qcol qvect]
  &ldquo;Test if position <code>qcol</code> is okay for addition to <code>qvect</code>&rdquo;
  (defn f [x] (let [[row col] x]</p>

<pre><code>            (or
              (= qcol col)
              (= qcol (- col (+ row  1)))
              (= qcol (+ col (+ row  1))))))
</code></pre>

<p>  (empty? (filter f (map-indexed vector (rseq qvect)))))</p>

<p>(defn qsolve [qvect]
  &ldquo;Recursively find solution based on initial <code>qvect</code> board config&rdquo;
  (doseq [p (range board-size)]</p>

<pre><code>(if (qtest p qvect)
  (let [qnew (conj qvect p)]
    (if (= (count qnew) board-size) (println qnew) (qsolve qnew))))))
</code></pre>

<p>(qsolve []) ; start solution finding from empty board config
```</p>

<p>How to run this program: if you have Clojure and <a href="http://leiningen.org/">Leiningen</a> installed
then save this code into <code>eight.clj</code> and run:
<code>
lein exec eight.clj
</code></p>

<p>It will find all solutions and send them to console, one solution per
line (92 solutions for standard chessboard):
<code>
[0 4 7 5 2 6 1 3]
[0 5 7 2 6 3 1 4]
[0 6 3 5 7 1 4 2]
[0 6 4 7 1 3 5 2]
[1 3 5 7 2 0 6 4]
[1 4 6 0 2 7 5 3]
[1 4 6 3 0 7 5 2]
...
</code></p>

<p>Alternatively try to run the code through online execution service:
<a href="http://www.compileonline.com/execute_clojure_online.php">http://www.compileonline.com/execute_clojure_online.php</a></p>

<p>As result Clojure shows itself as a very expressive language. The same
conclusion is confirmed by
<a href="http://www.infoq.com/news/2013/03/Language-Expressiveness">language expressivness study</a>.
And I hope to continue my journey to the functional programming world :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
